type Query {
    #    TEAMS
    fetchAllTeams(pageIndex: Int, pageSize: Int, sort: [Sort]):Page
    fetchTeamById(id: ID): Team
    #    DRIVERS
    fetchAllDrivers: [Driver]!
    fetchDriverById(id:ID): Driver
    #    RACES
    fetchAllRaces: [Race]!
    fetchRaceById(id: ID): Race
    #    MOCK
    mockGenerateTeams:[Team]!
    mockGenerateDrivers:[Driver]!
    mockAssignDriverToTeams:[Driver]!
}

type Mutation{
    #    TEAMS
    createTeam(newTeam: CreateTeamInput!): Team!
    editTeam(editedTeam: EditTeamInput!): Team!
    deleteTeamById(id: ID): Boolean
    addDriver(teamId:ID, driverId: ID): [Driver]!
    removeDriverById(teamId:ID, driverId: ID): [Driver]!
    #    DRIVERS
    createDriver(driverInput: CreateDriverInput): Driver!
    editDriverPersonalInfo(driverInput: editDriverPersonalInfoInput): Driver!
    deleteDriverById(id: ID): Boolean
    #    RACES
    createRace(createRaceInput: CreateRace): Race
    editRace(editRaceInput: EditRace):Race
    startRace(raceId: ID):Race
    finishRace(raceId: ID, raceRankingsInputs:[CreateRaceRanking]):Race
    cancelRace(raceId: ID):Race
}

enum DIRECTION{
    ASC
    DESC
}

enum RACE_STATUS{
    READY
    RUNNING
    CANCELLED
    FINISHED
}

input Sort{
    direction: DIRECTION
    field: String
}

type Page{
    data: [Team]
    totalPages: Int
    totalElements: Int
    isFirst: Boolean
    isLast: Boolean
    hasNext: Boolean
    hasPrevious: Boolean
}

input CreateTeamInput {
    name: String!
}


input EditTeamInput {
    id: ID!
    name: String!
}

input CreateDriverInput{
    firstName: String!
    lastName: String!
    age: Int!
    carNumber: Int!
}

input editDriverPersonalInfoInput{
    id: ID!
    firstName: String
    lastName: String
    age: Int
    carNumber: Int
}

input CreateRaceRanking{
    driverId: ID!
    position: Int!
    pointsCount: Int!
    hasFastestLap: Boolean!
    didNotFinished: Boolean!
}

input CreateRace{
    circuitName: String!
    lapsCount:Int!
    averageLapTimeInSeconds: Int!
    startDate: String!
}


input EditRace{
    id: ID!
    circuitName: String!
    lapsCount:Int!
    averageLapTimeInSeconds: Int!
    startDate: String!
}

type Team{
    id: ID!
    name: String!
    drivers: [Driver]
    winsCount: Int!
    pointsCount: Int!
}


type Race{
    id:ID!
    circuitName:String!
    lapsCount: Int!
    averageLapTimeInSeconds: Int!
    startDate: String!
    endDate: String
    status: RACE_STATUS!
    raceRankings: [RaceRanking]
}


type Driver{
    id: ID!
    firstName: String!
    lastName: String!
    age: Int!
    carNumber: Int!
    winsCount: Int!
    pointsCount: Int!
    fastestLapsCount: Int!
    crashesCount: Int!
    didNotFinishedCount: Int!
    raceRankings: [RaceRanking]
    team: Team
}

type RaceRanking{
    id: ID!
    race: String!
    driver: Driver!
    position: Int!
    pointsCount: Int!
    hasFastestLap: Boolean!
    didNotFinished: Boolean!
    isRaceWinner: Boolean!
}
